<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookItApi</name>
    </assembly>
    <members>
        <member name="T:BookItApi.Authorization.AdminAuthorization">
            <summary>
            Handler de autorização para verificar se o usuário é um administrador.
            </summary>
        </member>
        <member name="M:BookItApi.Authorization.AdminAuthorization.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,BookItApi.Authorization.AdminOnly)">
            <summary>
            Processa o requisito de autorização para verificar se o usuário tem a claim 'IsAdmin' como 'True'.
            </summary>
            <param name="context">O contexto da autorização, que contém o usuário e as informações necessárias para autorização.</param>
            <param name="requirement">O requisito de autorização que define o critério para a autorização.</param>
            <returns>Uma tarefa que representa a operação assíncrona.</returns>
        </member>
        <member name="T:BookItApi.Authorization.AdminOnly">
            <summary>
            Requisito de autorização que verifica se o usuário é um administrador.
            </summary>
        </member>
        <member name="M:BookItApi.Authorization.AdminOnly.#ctor(System.Boolean)">
            <summary>
            Construtor para definir o requisito de ser admin.
            </summary>
            <param name="isAdmin">Indica se o usuário deve ser um administrador.</param>
        </member>
        <member name="P:BookItApi.Authorization.AdminOnly.IsAdmin">
            <summary>
            Indica se o requisito é que o usuário seja um administrador.
            </summary>
        </member>
        <member name="T:BookItApi.Controllers.UserController">
            <summary>
            Controlador responsável por gerenciar as operações dos usuários no sistema,
            </summary>
        </member>
        <member name="M:BookItApi.Controllers.UserController.#ctor(BookItApi.Services.UserService)">
            <summary>
            Inicializa uma nova instância do controlador <see cref="T:BookItApi.Controllers.UserController"/>.
            </summary>
            <param name="userService">Serviço responsável pela lógica de negócios relacionada aos usuários.</param>
        </member>
        <member name="M:BookItApi.Controllers.UserController.CadastraUser(BookItApi.Dtos.User.CreateUserDto)">
            <summary>
            Adiciona um usuário ao banco de dados do BookIt
            </summary>
            <param name="userDto">Objetos com os campos necessários para a criação de um usuário</param>
            <returns>
            Task
            </returns>
            <response code="200">Caso inserção seja feita com sucesso</response>
        </member>
        <member name="M:BookItApi.Controllers.UserController.LoginUser(BookItApi.Dtos.User.LoginUserDto)">
            <summary>
            Faz login no sistema
            </summary>
            <param name="userDto">Objetos com os campos necessários para a realização do login</param>
            <returns>
            Task
            </returns>
            <response code="200">Caso login seja feito com sucesso</response>
        </member>
        <member name="M:BookItApi.Controllers.UserController.Logout">
            <summary>
            Faz logout com um usuário
            </summary>
            <returns>
            Task
            </returns>
            <response code="200">Caso o usuário se deslogue com sucesso</response>
        </member>
        <member name="M:BookItApi.Controllers.UserController.ObterUsuariosNaoAprovados">
            <summary>
            Obtém todos os usuários que ainda não foram aprovados.
            </summary>
            <returns>Lista de usuários não aprovados.</returns>
            <response code="200">Retorna a lista de usuários não aprovados</response>
            <response code="404">Caso não haja usuários não aprovados</response>
        </member>
        <member name="T:BookItApi.Data.UserDbContext">
            <summary>
            Representa o contexto de dados para a aplicação, que gerencia as entidades de admin e servidor, 
            além das tabelas de autenticação do Identity.
            </summary>
        </member>
        <member name="M:BookItApi.Data.UserDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BookItApi.Data.UserDbContext})">
            <summary>
            Inicializa uma nova instância do contexto, configurando as opções passadas.
            </summary>
            <param name="opts">As opções de configuração do contexto do banco de dados.</param>    
        </member>
        <member name="T:BookItApi.Dtos.User.CadastroPendenteDto">
            <summary>
            Representa os dados de um usuário no sistema com o cadastro não confirmado.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CadastroPendenteDto.Nome">
            <summary>
            Obtém o nome completo do usuário.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CadastroPendenteDto.Cpf">
            <summary>
            Obtém o CPF do usuário.
            </summary>
        </member>
        <member name="T:BookItApi.Dtos.User.CreateUserDto">
            <summary>
            Representa os dados necessários para criar um novo usuário no sistema.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.IsAdmin">
            <summary>
            Indica se o usuário é admin ou servidor.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.Siape">
            <summary>
            Obtém ou define o SIAPE do usuário.
            O SIAPE deve ter exatamente 6 dígitos numéricos.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.Cpf">
            <summary>
            Obtém ou define o CPF do usuário.
            O CPF deve estar no formato 000.000.000-00.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.Name">
            <summary>
            Obtém ou define o nome completo do usuário.
            O nome completo não pode ter mais de 100 caracteres.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.Email">
            <summary>
            Obtém ou define o e-mail do usuário.
            O e-mail deve ser válido e não pode ter mais de 120 caracteres.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.PhoneNumber">
            <summary>
            Obtém ou define o número de celular do usuário.
            O celular deve estar no formato (00) 00000-0000.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.IsAprovado">
            <summary>
            Indica se o servidor foi aprovado pelo administrador para utilizar o sistema.
            Só será verdadeiro quando o administrador aprovar o servidor.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.Password">
            <summary>
            Obtém ou define a senha do usuário.
            A senha deve ter no mínimo 8 caracteres e no máximo 120 caracteres.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.CreateUserDto.RePassword">
            <summary>
            Obtém ou define a confirmação de senha do usuário.
            A confirmação de senha deve ser igual à senha fornecida em "Password".
            </summary>
        </member>
        <member name="T:BookItApi.Dtos.User.LoginUserDto">
            <summary>
            Representa os dados de um usuário para fazer login no sistema.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.LoginUserDto.Cpf">
            <summary>
            Obtém o CPF do usuário.
            O CPF deve estar no formato 000.000.000-00.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.LoginUserDto.Password">
            <summary>
            Obtém a senha do usuário.
            </summary>
        </member>
        <member name="T:BookItApi.Dtos.User.ReadUserDto">
            <summary>
            Representa os dados de um usuário que foram recuperados do sistema.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.Id">
            <summary>
            Obtém o identificador único do usuário.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.IsAdmin">
            <summary>
            Indica se o usuário é admin ou não.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.Name">
            <summary>
            Obtém o nome completo do usuário.
            O nome completo não pode ter mais de 100 caracteres.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.Siape">
            <summary>
            Obtém o SIAPE do usuário.
            O SIAPE deve ter exatamente 6 dígitos numéricos.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.Cpf">
            <summary>
            Obtém o CPF do usuário.
            O CPF deve estar no formato 000.000.000-00.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.Email">
            <summary>
            Obtém o e-mail do usuário.
            O e-mail deve ser válido e não pode ter mais de 120 caracteres.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.PhoneNumber">
            <summary>
            Obtém o número de celular do usuário.
            O celular deve estar no formato (00) 00000-0000.
            </summary>
        </member>
        <member name="P:BookItApi.Dtos.User.ReadUserDto.IsAprovado">
            <summary>
            Indica se o servidor foi aprovado pelo administrador para utilizar o sistema.
            Só será verdadeiro quando o administrador aprovar o servidor.
            </summary>
        </member>
        <member name="T:BookItApi.Migrations.SecondMigration">
            <inheritdoc />
        </member>
        <member name="M:BookItApi.Migrations.SecondMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BookItApi.Migrations.SecondMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BookItApi.Migrations.SecondMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BookItApi.Models.User">
            <summary>
            Representa um usuário no sistema, que herda de IdentityUser e inclui campos adicionais como IsAdmin, Name, SIAPE, CPF e IsAprovado.
            </summary>
        </member>
        <member name="P:BookItApi.Models.User.IsAdmin">
            <summary>
            Indica se o usuário é admin ou não.
            </summary>
        </member>
        <member name="P:BookItApi.Models.User.Name">
            <summary>
            Obtém ou define o nome do usuário.
            </summary>
        </member>
        <member name="P:BookItApi.Models.User.Siape">
            <summary>
            Obtém ou define o SIAPE do usuário.
            O SIAPE deve ter exatamente 6 dígitos numéricos.
            </summary>
        </member>
        <member name="P:BookItApi.Models.User.Cpf">
            <summary>
            Obtém ou define o CPF do usuário.
            O CPF deve estar no formato 000.000.000-00.
            </summary>
        </member>
        <member name="P:BookItApi.Models.User.IsAprovado">
            <summary>
            Indica se o servidor foi aprovado pelo administrador para utilizar o sistema.
            Só será verdadeiro quando o administrador aprovar o servidor.
            </summary>
        </member>
        <member name="T:BookItApi.Profiles.UsersProfile">
            <summary>
            Configura os mapeamentos entre os DTOs dos Users e os modelos correspondentes.
            Esta classe é usada pelo AutoMapper para mapear as propriedades entre as classes.
            </summary>
        </member>
        <member name="M:BookItApi.Profiles.UsersProfile.#ctor">
            <summary>
            Construtor que define os mapeamentos entre os DTOs e os modelos dos Usuários.
            </summary>
        </member>
        <member name="T:BookItApi.Services.TokenService">
            <summary>
            Serviço responsável pela geração de tokens JWT para autenticação de Admin ou Servidor.
            </summary>
        </member>
        <member name="M:BookItApi.Services.TokenService.GenerateToken(BookItApi.Models.User)">
            <summary>
            Gera um token JWT para o usuário do sistema.
            </summary>
            <param name="user">O usuário que está sendo autenticado.</param>
            <returns>Retorna um token JWT assinado e válido.</returns>
        </member>
        <member name="T:BookItApi.Services.UserService">
            <summary>
            Serviço responsável pelas operações de autenticação e gerenciamento de administradores no sistema.
            Inclui funcionalidades como cadastro, login, logout e etc.
            </summary>
        </member>
        <member name="M:BookItApi.Services.UserService.#ctor(AutoMapper.IMapper,Microsoft.AspNetCore.Identity.UserManager{BookItApi.Models.User},Microsoft.AspNetCore.Identity.SignInManager{BookItApi.Models.User},BookItApi.Services.TokenService,BookItApi.Data.UserDbContext)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:BookItApi.Services.UserService"/>.
            </summary>
            <param name="mapper">Objeto de mapeamento entre DTOs e modelos de domínio.</param>
            <param name="userManager">Gerenciador de usuários do Identity para administração de contas de usuário.</param>
            <param name="signInManager">Gerenciador de login do Identity.</param>
            <param name="tokenService">Serviço responsável pela geração de tokens JWT.</param>
            <param name="context">Contexto do banco de dados específico para a administração de dados de usuários.</param>
        </member>
        <member name="M:BookItApi.Services.UserService.CadastraUsuario(BookItApi.Dtos.User.CreateUserDto)">
            <summary>
            Cadastra um novo usuário no sistema, garantindo que SIAPE, e-mail e telefone sejam únicos
            </summary>
            <param name="userDto">Objeto com os dados do usuário a ser cadastrado.</param>
            <returns>Retorna um Task representando a operação de cadastro.</returns>
            <exception cref="T:System.ApplicationException">Lançada caso já exista um usuário com dados duplicados.</exception>
        </member>
        <member name="M:BookItApi.Services.UserService.LoginUser(BookItApi.Dtos.User.LoginUserDto)">
            <summary>
            Realiza o login de um usuário no sistema.
            </summary>
            <param name="userDto">Objeto com as credenciais do Usuário para o login.</param>
            <returns>Retorna o token JWT gerado após o login.</returns>
        </member>
        <member name="M:BookItApi.Services.UserService.Logout">
            <summary>
            Realiza o logout do usuário.
            </summary>
            <returns>Retorna um Task representando a operação de logout.</returns>
        </member>
        <member name="M:BookItApi.Services.UserService.ObterUsuariosNaoAprovadosAsync">
            <summary>
            Obtém todos os usuários que ainda não foram aprovados.
            </summary>
            <returns>Uma lista de DTOs contendo apenas Nome e CPF de usuários não aprovados.</returns>
        </member>
    </members>
</doc>
